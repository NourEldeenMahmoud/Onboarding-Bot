using Discord;
using Discord.WebSocket;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using System.IO;

namespace Onboarding_bot.Services
{
    public class StoryService
    {
        private readonly ILogger<StoryService> _logger;
        private const string StoriesFile = "stories.json";

        public StoryService(
            ILogger<StoryService> logger)
        {
            _logger = logger;
        }

        public async Task<string> GenerateStoryAsync(
            Dictionary<string, string> userResponses,
            string inviterName, string inviterRole, string inviterStory)
        {
            var prompt = $@"
ÿ£ŸÜÿ™ ŸÉÿßÿ™ÿ® ŸÇÿµÿµ Roleplay ŸÑÿπÿßŸÑŸÖ ÿßŸÑŸÖÿßŸÅŸäÿß ŸÅŸä ÿ≥Ÿäÿ±ŸÅÿ± Discord ÿßÿ≥ŸÖŸá ""BitMob""ÿå 
ÿßŸÑŸÖÿØŸäŸÜÿ© ÿßÿ≥ŸÖŸáÿß ""The Underworld""ÿå ŸÖŸÑŸäÿ¶ÿ© ÿ®ÿßŸÑÿ£ŸÖÿßŸÉŸÜ: Coding Alleyÿå Debuggers Streetÿå 
The Underworld Casinoÿå Don's Officeÿå The Underworld Academyÿå Police HQÿå Black Marketÿå 
Hidden Docksÿå Tech Labÿå Abandoned Warehouseÿå ŸàÿßŸÑŸÖÿ≤ŸäÿØ.

ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿßŸÑÿ±ŸàŸÑÿ≤ ÿßŸÑÿ™ÿßŸÑŸäÿ© ŸÖÿπ ÿßŸÑÿ∑ÿ®ŸÇŸäÿ©:
- The Don: ÿ±ÿ£ÿ≥ ÿßŸÑÿπÿµÿßÿ®ÿ©ÿå ÿ£ÿπŸÑŸâ ÿ≥ŸÑÿ∑ÿ©.
- Consigliere: ÿßŸÑŸÖÿ≥ÿ™ÿ¥ÿßÿ± ÿßŸÑŸÖŸÇÿ±ÿ® ŸÑŸÑŸÄ Don.
- The Don's Kin: ÿ£ŸÅÿ±ÿßÿØ ÿßŸÑÿπÿßÿ¶ŸÑÿ© ÿßŸÑŸÖŸÇÿ±ÿ®ÿ© ŸÑŸÑŸÄ Don.
- Associate: ÿ£ÿπÿ∂ÿßÿ° ŸÖÿπÿ™ŸÖÿØŸäŸÜ ŸÅŸä ÿßŸÑÿπÿµÿßÿ®ÿ©.
- Outsider: ÿ£ÿ¥ÿÆÿßÿµ ÿÆÿßÿ±ÿ¨ ÿßŸÑÿπÿµÿßÿ®ÿ© ŸÑŸÉŸÜ ŸÑŸáŸÖ ÿ™ŸàÿßÿµŸÑ ŸÖÿ≠ÿØŸàÿØ.
- Shady Snitch: ÿßŸÑÿπŸÖŸÑÿßÿ° ÿ£Ÿà ÿßŸÑŸÖÿÆÿ®ÿ±ŸäŸÜ ÿßŸÑŸÑŸä ÿπŸÜÿØŸáŸÖ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ≥ÿ±Ÿäÿ©ÿå Ÿáÿ∞ÿß **ÿ±ŸàŸÑ ŸàŸÑŸäÿ≥ ÿßÿ≥ŸÖ ÿ¥ÿÆÿµ**.

ŸÖŸáŸÖÿ™ŸÉ: ÿßÿ®ÿ™ŸÉÿ± ŸÇÿµÿ© ŸÇÿµŸäÿ±ÿ© Ÿàÿ≠ŸÖÿßÿ≥Ÿäÿ© ŸÑŸáÿ∞ÿß ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ¨ÿØŸäÿØ ÿ®ÿ≠Ÿäÿ´ ÿ™ŸÉŸàŸÜ **ÿØŸäŸÜÿßŸÖŸäŸÉŸäÿ© ŸàŸÖŸÑŸäÿ¶ÿ© ÿ®ÿßŸÑŸÖÿµÿßÿØŸÅÿßÿ™ ŸàÿßŸÑÿ£ÿ≠ÿØÿßÿ´ ÿßŸÑŸÖÿßŸÅŸäÿßŸàŸäÿ©**ÿå ŸÖÿπ **ŸÑŸÖÿ≥ÿ© Ÿáÿ≤ŸÑŸäÿ©/ÿ≥ÿßÿÆÿ±ÿ©** ÿÆŸÅŸäŸÅÿ©.  
ÿ±ŸÉÿ≤ ÿπŸÑŸâ ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ¨ÿØŸäÿØ ŸàÿßŸÑÿ¥ÿÆÿµ ÿßŸÑÿ∞Ÿä ÿØÿπÿßŸáÿå Ÿàÿßÿ¨ÿπŸÑ ÿßŸÑŸÇÿµÿ© ŸÖÿÆÿ™ŸÑŸÅÿ© ÿπŸÜ ÿ£Ÿä ŸÇÿµÿ© ÿ≥ÿßÿ®ŸÇÿ©.

ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ŸÅŸä ÿßŸÑŸÇÿµÿ©:
1. ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿπÿßÿ± ÿ®ÿ£ÿ≥ŸÑŸàÿ® ŸÖÿßŸÅŸäÿßŸàŸäÿå ŸÖÿ±ÿ™ÿ®ÿ∑ ÿ®ÿµŸÅÿßÿ™ ÿßŸÑÿπÿ∂Ÿà ÿ£Ÿà ŸÖŸáÿßÿ±ÿ™Ÿáÿå ŸàŸäŸÉŸàŸÜ ŸÖÿ≥ÿ™Ÿàÿ≠Ÿâ ÿ£Ÿà ŸÇÿ±Ÿäÿ® ŸÖŸÜ ÿßÿ≥ŸÖŸá ÿßŸÑÿ≠ŸÇŸäŸÇŸä.
2. ÿÆŸÑŸÅŸäÿ© ÿØÿ±ÿßŸÖŸäÿ©: ÿßŸÑÿπÿ∂Ÿà ŸÑŸÖ ŸäŸÜÿ∂ŸÖ ÿ®ÿ≥ŸáŸàŸÑÿ©ÿå ÿ®ŸÑ ÿ≠ÿØÿ´ ŸÖŸàŸÇŸÅ ŸÖÿ´Ÿäÿ± ÿ£Ÿà ÿßŸÉÿ™ÿ¥ÿßŸÅŸá ÿ®Ÿàÿßÿ≥ÿ∑ÿ© ÿ£ÿ≠ÿØ ÿ±ÿ¨ÿßŸÑ ÿßŸÑÿπÿµÿßÿ®ÿ© ÿ£Ÿà ŸÖŸáŸÖÿ© ÿÆÿ∑ÿ±ÿ© ÿ£Ÿà ŸÖÿ∑ÿßÿ±ÿØÿ© ÿ£Ÿà ÿ™ÿ≠ÿØŸä ŸÅŸä ÿßŸÑŸÖÿØŸäŸÜÿ©.
3. ÿØŸÖÿ¨ ÿßŸÑÿ¥ÿÆÿµ ÿßŸÑÿ∞Ÿä ÿØÿπÿßŸáÿå ÿßŸÑÿ±ŸàŸÑ ÿßŸÑÿÆÿßÿµ ÿ®Ÿáÿå ŸàŸÇÿµÿ™Ÿá ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ÿØÿßÿÆŸÑ ÿ£ÿ≠ÿØÿßÿ´ ÿßŸÑŸÇÿµÿ© ÿ®ÿ¥ŸÉŸÑ ŸÖÿ®ÿßÿ¥ÿ±.
4. ÿßŸÑÿ£ÿ≠ÿØÿßÿ´ Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ŸÖÿ¥ŸàŸÇÿ©ÿå ŸÖŸÑŸäÿ¶ÿ© ÿ®ŸÖÿµÿ∑ŸÑÿ≠ÿßÿ™ ÿßŸÑŸÖÿßŸÅŸäÿß: ÿπŸÖŸÑŸäÿßÿ™ ÿ≥ÿ±Ÿäÿ©ÿå ÿ™ŸáÿØŸäÿØÿßÿ™ÿå ŸÖŸÑÿßÿ≠ŸÇÿßÿ™ÿå ÿßÿÆÿ™ÿ±ÿßŸÇÿßÿ™ÿå ŸÑŸÇÿßÿ°ÿßÿ™ ŸÖÿπ ÿ±ÿ¨ÿßŸÑ ÿßŸÑÿπÿµÿßÿ®ÿ©ÿå ŸÖÿÆÿ∑ÿ∑ÿßÿ™.
5. ÿ£ÿ∂ŸÅ ŸÑŸÖÿ≥ÿßÿ™ ÿ®ÿ±ŸÖÿ¨Ÿäÿ© ÿ®ÿ≥Ÿäÿ∑ÿ©: ÿßŸÑÿπÿ∂Ÿà ŸÇÿØ Ÿäÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸáÿßÿ±ÿßÿ™ ÿ®ÿ±ŸÖÿ¨Ÿäÿ© ÿ£Ÿà ÿßÿÆÿ™ÿ±ÿßŸÇŸäÿ© ŸÑÿ•ŸÜŸÇÿßÿ∞ ÿßŸÑŸÖŸàŸÇŸÅ ÿ£Ÿà ÿßŸÉÿ™ÿ¥ÿßŸÅ ÿ≥ÿ±ÿå ŸÑŸÉŸÜ **ÿßŸÑÿ£ÿ≠ÿØÿßÿ´ ÿßŸÑŸÖÿßŸÅŸäÿßŸàŸäÿ© ÿ™ÿ∏ŸÑ ŸÖÿ≠Ÿàÿ± ÿßŸÑŸÇÿµÿ©**.
6. ÿßŸÑŸÜŸáÿßŸäÿ©: ÿßŸÑÿπÿ∂Ÿà Ÿäÿ™ŸÖ ŸÇÿ®ŸàŸÑŸá ŸÅŸä ÿßŸÑÿπÿµÿßÿ®ÿ© ŸàŸäÿ≠ÿµŸÑ ÿπŸÑŸâ ŸÖŸÉÿßŸÜŸá ÿßŸÑÿ£ŸàŸÑŸä ŸÅŸä ÿßŸÑŸÖÿØŸäŸÜÿ© ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑÿ±ŸàŸÑÿ≤ÿå ŸàŸäŸÉŸàŸÜ ÿØŸàÿ±Ÿá Ÿàÿßÿ∂ÿ≠ ŸÅŸä ÿßŸÑŸÖŸÉÿßŸÜ ÿßŸÑÿ∞Ÿä ŸäŸÑŸäŸÇ ÿ®ŸÖŸáÿßÿ±ÿßÿ™Ÿá.
7. ÿßŸÑŸÇÿµÿ© Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ **ŸÇÿµŸäÿ±ÿ©ÿå ŸÖŸÖÿ™ÿπÿ©ÿå ŸÖŸÑŸäÿ¶ÿ© ÿ®ÿßŸÑŸÖŸÅÿßÿ¨ÿ¢ÿ™ÿå Ÿàÿ∞ÿßÿ™ ÿ∑ÿßÿ®ÿπ Ÿáÿ≤ŸÑŸä ÿÆŸÅŸäŸÅ**ÿå ŸÖÿπ ÿßŸÑÿ≠ŸÅÿßÿ∏ ÿπŸÑŸâ ÿßŸÑÿ¨Ÿà ÿßŸÑŸÖÿßŸÅŸäŸàŸä.

ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ¨ÿØŸäÿØ:
- ÿßŸÑÿßÿ≥ŸÖ: {userResponses["name"]}
- ÿßŸÑÿ≥ŸÜ: {userResponses["age"]}
- ÿßŸÑÿßŸáÿ™ŸÖÿßŸÖÿßÿ™: {userResponses["interest"]}
- ÿßŸÑÿ™ÿÆÿµÿµ: {userResponses["specialty"]}
- ÿßŸÑŸÖŸäÿ≤ÿ©: {userResponses["strength"]}
- ÿßŸÑÿπŸäÿ®: {userResponses["weakness"]}
- ÿßŸÑŸÖŸÉÿßŸÜ ÿßŸÑŸÖŸÅÿ∂ŸÑ: {userResponses["favoritePlace"]}

ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ¥ÿÆÿµ ÿßŸÑÿ∞Ÿä ÿØÿπÿßŸá:
- ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿπÿßÿ±: {inviterName}
- ÿßŸÑÿ±ŸàŸÑ: {inviterRole}
- ŸÇÿµÿ™Ÿá ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©: {inviterStory}
";

            try
            {
                var openAiKey = Environment.GetEnvironmentVariable("OPENAI_KEY");
                if (string.IsNullOrEmpty(openAiKey))
                {
                    _logger.LogError("OpenAI API key not found");
                    return "ÿ≠ÿµŸÑÿ™ ŸÖÿ¥ŸÉŸÑÿ© ŸÅŸä ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÄ AI.";
                }

                var client = new RestClient("https://api.openai.com/v1/chat/completions");
                var request = new RestRequest("", Method.Post);
                request.AddHeader("Authorization", $"Bearer {openAiKey}");
                request.AddHeader("Content-Type", "application/json");

                var body = new
                {
                    model = "gpt-4o-mini",
                    messages = new object[]
                    {
                        new { role = "user", content = prompt }
                    },
                    max_tokens = 800,
                    temperature = 0.7
                };

                request.AddJsonBody(body);

                var response = await client.ExecuteAsync(request);

                _logger.LogInformation("[OpenAI] HTTP Status: {StatusCode}", response.StatusCode);

                if (!response.IsSuccessful)
                {
                    _logger.LogError("[OpenAI] Failed with status: {StatusCode}", response.StatusCode);
                    return $"ÿ≠ÿµŸÑÿ™ ŸÖÿ¥ŸÉŸÑÿ© ÿ£ÿ´ŸÜÿßÿ° ÿ™ŸàŸÑŸäÿØ ÿßŸÑŸÇÿµÿ© (OpenAI). ŸÉŸàÿØ: {(int)response.StatusCode}";
                }

                var json = JObject.Parse(response.Content);
                var content = json["choices"]?[0]?["message"]?["content"]?.ToString()
                    ?? json["choices"]?[0]?["text"]?.ToString();

                if (string.IsNullOrWhiteSpace(content))
                {
                    _logger.LogWarning("[OpenAI] No content returned");
                    return "ŸÖÿßŸÅŸäÿ¥ ŸÖÿ≠ÿ™ŸàŸâ ÿ±ÿßÿ¨ÿπ ŸÖŸÜ ÿßŸÑŸÄ AI.";
                }

                return content.Trim();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "[OpenAI Exception] Failed to generate story");
                return "ÿ≠ÿµŸÑ ÿÆÿ∑ÿ£ ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÇÿπ ÿ£ÿ´ŸÜÿßÿ° ÿ™ŸàŸÑŸäÿØ ÿßŸÑŸÇÿµÿ©.";
            }
        }

        public async Task SendStoryToChannelAsync(SocketGuildUser user, string story, bool hasInvite, DiscordBotService discordService)
        {
            try
            {
                var storyChannelIdStr = Environment.GetEnvironmentVariable("DISCORD_STORY_CHANNEL_ID");
                if (string.IsNullOrEmpty(storyChannelIdStr) || !ulong.TryParse(storyChannelIdStr, out var storyChannelId))
                {
                    _logger.LogError("Story channel ID not found in environment variables");
                    return;
                }

                var storyChannel = discordService.GetClient().GetChannel(storyChannelId) as IMessageChannel;

                if (storyChannel == null)
                {
                    _logger.LogError("Story channel not found");
                    return;
                }

                var embed = new EmbedBuilder()
                    .WithTitle($"üé≠ {user.Username} - ŸÇÿµÿ© ÿ¨ÿØŸäÿØÿ©!")
                    .WithDescription(story)
                    .WithColor(hasInvite ? Color.Green : Color.Orange)
                    .WithThumbnailUrl(user.GetAvatarUrl())
                    .WithTimestamp(DateTimeOffset.UtcNow)
                    .WithFooter(footer => footer.Text = hasInvite ? "üü¢ ÿπÿ∂Ÿà ÿ®ÿ•ŸÜŸÅÿßŸäÿ™" : "üü† ÿπÿ∂Ÿà ÿ®ÿØŸàŸÜ ÿ•ŸÜŸÅÿßŸäÿ™")
                    .Build();

                await storyChannel.SendMessageAsync(embed: embed);
                _logger.LogInformation("[Story] Story sent to channel successfully");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "[Error] Failed to send story to channel");
            }
        }

        public void SaveStory(ulong userId, string story)
        {
            try
            {
                var stories = File.Exists(StoriesFile)
                    ? JsonConvert.DeserializeObject<Dictionary<ulong, string>>(File.ReadAllText(StoriesFile))
                    : new Dictionary<ulong, string>();

                stories[userId] = story;
                File.WriteAllText(StoriesFile, JsonConvert.SerializeObject(stories, Formatting.Indented));
                _logger.LogInformation("[Story] Story saved for user {UserId}", userId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "[Error] Failed to save story");
            }
        }

        public string LoadStory(ulong userId)
        {
            try
            {
                if (!File.Exists(StoriesFile)) return "";
                var stories = JsonConvert.DeserializeObject<Dictionary<ulong, string>>(File.ReadAllText(StoriesFile));
                return stories.ContainsKey(userId) ? stories[userId] : "";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "[Error] Failed to load story");
                return "";
            }
        }
    }
}
