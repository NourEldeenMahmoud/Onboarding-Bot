using Discord;
using Discord.WebSocket;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using System.IO;

namespace Onboarding_bot.Services
{
    public class StoryService
    {
        private readonly ILogger<StoryService> _logger;
        private const string StoriesFile = "stories.json";

        public StoryService(
            ILogger<StoryService> logger)
        {
            _logger = logger;
        }

        public async Task<string> GenerateStoryAsync(
            Dictionary<string, string> userResponses,
            string inviterName, string inviterRole, string inviterStory)
        {
                       var prompt = $@"
ÿ£ŸÜÿ™ ŸÉÿßÿ™ÿ® ŸÇÿµÿµ Roleplay ŸÑÿπÿßŸÑŸÖ ÿßŸÑŸÖÿßŸÅŸäÿß ŸÅŸä ÿ≥Ÿäÿ±ŸÅÿ± Discord ÿßÿ≥ŸÖŸá ""the DevMob"".  
ÿßŸÑŸÖÿØŸäŸÜÿ© ÿßÿ≥ŸÖŸáÿß ""The Underworld""ÿå ŸÖŸÑŸäÿßŸÜÿ© ÿ£ŸÖÿßŸÉŸÜ ÿ≤Ÿä: Coding Alleyÿå Debuggers Streetÿå 
The Underworld Casinoÿå Don's Officeÿå The Underworld Academyÿå Police HQÿå Black Marketÿå 
Hidden Docksÿå Tech Labÿå Abandoned Warehouseÿå Ÿàÿ∫Ÿäÿ±Ÿáÿß.

ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± ŸÇÿßŸäŸÖ ÿπŸÑŸâ ŸÜÿ∏ÿßŸÖ ÿ∑ÿ®ŸÇŸä ŸÖŸÜ ÿßŸÑÿ±ŸàŸÑÿ≤:
- The Don: ÿ±ÿ£ÿ≥ ÿßŸÑÿπÿµÿßÿ®ÿ©ÿå ÿ£ÿπŸÑŸâ ÿ≥ŸÑÿ∑ÿ©.
- Consigliere: ÿßŸÑŸÖÿ≥ÿ™ÿ¥ÿßÿ± ÿßŸÑŸÖŸÇÿ±ÿ® ŸÑŸÑŸÄ Don.
- The Don's Kin: ÿ£ŸÅÿ±ÿßÿØ ÿßŸÑÿπÿßÿ¶ŸÑÿ© ÿßŸÑŸÖŸÇÿ±ÿ®ÿ© ŸÑŸÑŸÄ Don.
- Associate: ÿ£ÿπÿ∂ÿßÿ° ŸÖÿπÿ™ŸÖÿØŸäŸÜ ŸÅŸä ÿßŸÑÿπÿµÿßÿ®ÿ©.
- Outsider: ÿ£ÿ¥ÿÆÿßÿµ ÿ®ÿ±ŸëŸá ÿßŸÑÿπÿµÿßÿ®ÿ© ÿ®ÿ≥ ŸÑŸäŸáŸÖ ÿ™ŸàÿßÿµŸÑ ŸÖÿ≠ÿØŸàÿØ.
- Shady Snitch: ÿßŸÑÿπŸÖŸÑÿßÿ° ÿ£Ÿà ÿßŸÑŸÖÿÆÿ®ÿ±ŸäŸÜ ÿßŸÑŸÑŸä ÿπŸÜÿØŸáŸÖ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ≥ÿ±Ÿäÿ© (ÿØŸá ÿ±ŸàŸÑ ŸÖÿ¥ ÿßÿ≥ŸÖ ÿ¥ÿÆÿµ).

üéØ ŸÖŸáŸÖÿ™ŸÉ: ÿßÿ®ÿ™ŸÉÿ± ŸÇÿµÿ© ŸÇÿµŸäÿ±ÿ© Ÿàÿ≠ŸÖÿßÿ≥Ÿäÿ© ŸÑŸÑÿπÿ∂Ÿà ÿßŸÑÿ¨ÿØŸäÿØ ÿ®ÿ≠Ÿäÿ´ ÿ™ÿ®ŸÇŸâ **ÿØŸäŸÜÿßŸÖŸäŸÉŸäÿ©ÿå ŸÖŸÅÿßÿ¨ÿ¶ÿ©ÿå ŸÖÿßŸÅŸäÿßŸàŸäÿ©** 
ŸàŸÅŸäŸáÿß **ŸÑŸÖÿ≥ÿ© Ÿáÿ≤ŸÑŸäÿ© ÿ≥ÿßÿÆÿ±ÿ© ÿÆŸÅŸäŸÅÿ©**. 
ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ¨ÿØŸäÿØ Ÿäÿ®ŸÇŸâ ŸÖÿ≠Ÿàÿ± ÿßŸÑÿ£ÿ≠ÿØÿßÿ´ÿå ŸàŸÉŸÖÿßŸÜ ÿßŸÑÿ¥ÿÆÿµ ÿßŸÑŸÑŸä ÿØÿπÿßŸá Ÿäÿ∏Ÿáÿ± ŸÅŸä ÿßŸÑŸÇÿµÿ© ÿ®ÿ¥ŸÉŸÑ ŸÖÿ®ÿßÿ¥ÿ±.  

---

### ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ŸÅŸä ÿßŸÑŸÇÿµÿ©:

1. **ÿßÿ≥ŸÖ ŸÖÿ≥ÿ™ÿπÿßÿ± ŸÖÿßŸÅŸäÿßŸàŸä** ŸÑŸÑÿπÿ∂Ÿà ÿßŸÑÿ¨ÿØŸäÿØÿå ŸÖÿ≥ÿ™Ÿàÿ≠Ÿâ ŸÖŸÜ ÿßÿ≥ŸÖŸá ÿ£Ÿà ŸÖŸáÿßÿ±ÿ™Ÿá.  
2. **ÿÆŸÑŸÅŸäÿ© ÿØÿ±ÿßŸÖŸäÿ©**: ÿßŸÜÿ∂ŸÖÿßŸÖŸá ŸÖÿ¥ ÿ®ÿ≥ŸáŸàŸÑÿ© ‚Üí ŸÑÿßÿ≤ŸÖ Ÿäÿ≠ÿµŸÑ ŸÖŸàŸÇŸÅ ŸÖÿ´Ÿäÿ±ÿå ŸÖÿ∑ÿßÿ±ÿØÿ©ÿå ÿ™ÿ≠ÿØŸäÿå ŸÖŸáŸÖÿ© ÿÆÿ∑ÿ±ÿ©ÿå ÿ£Ÿà ÿµÿØŸÅÿ© ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÇÿπÿ©.  
3. **ÿØŸÖÿ¨ ÿßŸÑÿ¥ÿÆÿµ ÿßŸÑŸÑŸä ÿØÿπÿßŸá**: ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßÿ≥ŸÖŸá ÿßŸÑŸÖÿ≥ÿ™ÿπÿßÿ±ÿå ÿßŸÑÿ±ŸàŸÑ ÿ®ÿ™ÿßÿπŸáÿå Ÿàÿ¨ÿ≤ÿ° ŸÖŸÜ ŸÇÿµÿ™Ÿá ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ŸÅŸä ÿ£ÿ≠ÿØÿßÿ´ ÿßŸÑŸÇÿµÿ©.  
4. **ÿßŸÑÿ£ÿ≠ÿØÿßÿ´ ÿ™ÿ®ŸÇŸâ ŸÖÿ¥ŸàŸÇÿ©**: ŸÅŸäŸáÿß ŸÖÿµÿ∑ŸÑÿ≠ÿßÿ™ ÿßŸÑŸÖÿßŸÅŸäÿß (ÿπŸÖŸÑŸäÿßÿ™ ÿ≥ÿ±Ÿäÿ©ÿå ÿ™ŸáÿØŸäÿØÿßÿ™ÿå ŸÖŸÑÿßÿ≠ŸÇÿßÿ™ÿå ÿµŸÅŸÇÿßÿ™ ÿ≥ŸàÿØÿßÿ°ÿå ÿßÿÆÿ™ÿ±ÿßŸÇÿßÿ™).  
5. **ŸÑŸÖÿ≥ÿßÿ™ ÿ®ÿ±ŸÖÿ¨Ÿäÿ©**: ÿßŸÑŸÖŸáÿßÿ±ÿßÿ™ ÿßŸÑÿ™ŸÇŸÜŸäÿ© ÿ£Ÿà ÿßŸÑÿßÿÆÿ™ÿ±ÿßŸÇŸäÿ© ŸÖŸÖŸÉŸÜ ÿ™ŸÜŸÇÿ∞ ÿßŸÑŸÖŸàŸÇŸÅ ÿ£Ÿà ÿ™ŸÉÿ¥ŸÅ ÿ≥ÿ±ÿå 
ÿ®ÿ≥ ÿÆŸÑŸä ÿßŸÑÿ¨Ÿà ÿßŸÑÿπÿßŸÖ ŸÖÿßŸÅŸäŸàŸä.  
6. **ÿ∑ÿßÿ®ÿπ Ÿáÿ≤ŸÑŸä/ÿ≥ÿßÿÆÿ±**: ŸÖÿ¥ ÿ¨ÿØ ÿ£ŸàŸäÿå ŸÅŸä ŸÜŸÉŸáÿ© ŸÉŸàŸÖŸäÿØŸäÿ© ÿÆŸÅŸäŸÅÿ©.  
7. ÿßŸÑŸÇÿµÿ© ÿ™ÿ®ŸÇŸâ **ŸÇÿµŸäÿ±ÿ©ÿå ŸÖŸÖÿ™ÿπÿ©ÿå ŸÖŸÑŸäÿßŸÜÿ© ŸÖŸÅÿßÿ¨ÿ¢ÿ™**.

---

### ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ¨ÿØŸäÿØ:
- ÿßŸÑÿ™ŸàŸÇÿπÿßÿ™ ŸÖŸÜ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±: {userResponses["expectation"]}
- ÿßŸÑŸÑŸÇÿ® ÿßŸÑŸÖÿßŸÅŸäÿßŸàŸä: {userResponses["mafiaNickname"]}
- ÿßŸÑŸÇÿØÿ±ÿ© ÿßŸÑÿÆÿßÿ±ŸÇÿ©: {userResponses["superpower"]}
- ÿßŸÑŸÖŸäÿ≤ÿ© ŸàÿßŸÑÿπŸäÿ®: {userResponses["prosAndCons"]}

### ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ¥ÿÆÿµ ÿßŸÑŸÑŸä ÿØÿπÿßŸá:
- ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿπÿßÿ±: {inviterName}
- ÿßŸÑÿ±ŸàŸÑ: {inviterRole}
- ŸÇÿµÿ™Ÿá ÿßŸÑÿ≥ÿßÿ®ŸÇÿ©: {inviterStory}

---

‚ö† ÿ™ÿπŸÑŸäŸÖÿßÿ™ ŸÜŸáÿßÿ¶Ÿäÿ© ŸÖŸáŸÖÿ©:
- ŸÑÿß ÿ™ŸÉÿ±ÿ± ŸÜŸÅÿ≥ ÿßŸÑŸÇÿµÿ© ÿ£ÿ®ÿØÿßŸã.  
- ÿßÿ≥ÿ™ÿÆÿØŸÖ **ŸÉŸÑ ŸÖÿπŸÑŸàŸÖÿ©** ŸÖŸÜ ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ¨ÿØŸäÿØ.  
- ÿßÿ¨ÿπŸÑ ÿßŸÑŸÇÿµÿ© **ŸÅÿ±ŸäÿØÿ© ŸàŸÖÿÆÿ™ŸÑŸÅÿ©** ŸÉŸÑ ŸÖÿ±ÿ©.  
- ÿÆŸÑŸä ÿßŸÑÿ£ÿ≥ŸÑŸàÿ® **ÿ•ÿ®ÿØÿßÿπŸä ŸàŸÖÿ¥ŸàŸÇ**.  
- ŸÑÿßÿ≤ŸÖ **ÿßŸÑŸÑŸÇÿ® ÿßŸÑŸÖÿßŸÅŸäÿßŸàŸä Ÿäÿ∏Ÿáÿ± ÿ®ÿ¥ŸÉŸÑ ŸÖÿ™ŸÉÿ±ÿ±** ŸÅŸä ÿßŸÑŸÇÿµÿ©.  
- ŸÑÿßÿ≤ŸÖ **ÿßŸÑŸÇÿØÿ±ÿ© ÿßŸÑÿÆÿßÿ±ŸÇÿ© ÿ™ŸÑÿπÿ® ÿØŸàÿ± ÿ£ÿ≥ÿßÿ≥Ÿä ŸÅŸä ÿßŸÑÿ£ÿ≠ÿØÿßÿ´**.  
- ÿßÿ¨ÿπŸÑ ÿßŸÑŸÇÿµÿ© ÿ™ŸÜÿ™ŸáŸä ÿ®ŸÑŸÖÿ≠ÿ© ÿπŸÜ **ÿ™ŸàŸÇÿπÿßÿ™ ÿßŸÑÿπÿ∂Ÿà ŸÖŸÜ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±**.  
";

            try
            {
                var openAiKey = Environment.GetEnvironmentVariable("OPENAI_KEY");
                if (string.IsNullOrEmpty(openAiKey))
                {
                    _logger.LogError("OpenAI API key not found");
                    return "ÿ≠ÿµŸÑÿ™ ŸÖÿ¥ŸÉŸÑÿ© ŸÅŸä ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÄ AI.";
                }

                var client = new RestClient("https://api.openai.com/v1/chat/completions");
                var request = new RestRequest("", Method.Post);
                request.AddHeader("Authorization", $"Bearer {openAiKey}");
                request.AddHeader("Content-Type", "application/json");

                var body = new
                {
                    model = "gpt-4o-mini",
                    messages = new object[]
                    {
                        new { role = "user", content = prompt }
                    },
                    max_tokens = 800,
                    temperature = 1
                };

                request.AddJsonBody(body);

                var response = await client.ExecuteAsync(request);

                _logger.LogInformation("[OpenAI] HTTP Status: {StatusCode}", response.StatusCode);

                if (!response.IsSuccessful)
                {
                    _logger.LogError("[OpenAI] Failed with status: {StatusCode}", response.StatusCode);
                    return $"ÿ≠ÿµŸÑÿ™ ŸÖÿ¥ŸÉŸÑÿ© ÿ£ÿ´ŸÜÿßÿ° ÿ™ŸàŸÑŸäÿØ ÿßŸÑŸÇÿµÿ© (OpenAI). ŸÉŸàÿØ: {(int)response.StatusCode}";
                }

                var json = JObject.Parse(response.Content ?? "{}");
                var content = json["choices"]?[0]?["message"]?["content"]?.ToString()
                    ?? json["choices"]?[0]?["text"]?.ToString();

                if (string.IsNullOrWhiteSpace(content))
                {
                    _logger.LogWarning("[OpenAI] No content returned");
                    return "ŸÖÿßŸÅŸäÿ¥ ŸÖÿ≠ÿ™ŸàŸâ ÿ±ÿßÿ¨ÿπ ŸÖŸÜ ÿßŸÑŸÄ AI.";
                }

                return content.Trim();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "[OpenAI Exception] Failed to generate story");
                return "ÿ≠ÿµŸÑ ÿÆÿ∑ÿ£ ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÇÿπ ÿ£ÿ´ŸÜÿßÿ° ÿ™ŸàŸÑŸäÿØ ÿßŸÑŸÇÿµÿ©.";
            }
        }

        public async Task SendStoryToChannelAsync(SocketGuildUser user, string story, bool hasInvite, DiscordBotService discordService)
        {
            try
            {
                if (discordService == null)
                {
                    _logger.LogError("[Story] DiscordBotService is null - cannot send story to channel");
                    return;
                }

                var storyChannelIdStr = Environment.GetEnvironmentVariable("DISCORD_STORY_CHANNEL_ID");
                if (string.IsNullOrEmpty(storyChannelIdStr) || !ulong.TryParse(storyChannelIdStr, out var storyChannelId))
                {
                    _logger.LogError("[Story] Story channel ID not found in environment variables");
                    return;
                }

                var client = discordService.GetClient();
                if (client == null)
                {
                    _logger.LogError("[Story] Discord client is null - cannot send story to channel");
                    return;
                }

                var storyChannel = client.GetChannel(storyChannelId) as IMessageChannel;

                if (storyChannel == null)
                {
                    _logger.LogError("[Story] Story channel not found: {ChannelId}", storyChannelId);
                    return;
                }

                var embed = new EmbedBuilder()
                    .WithTitle($"üé≠ {user.Username} - ŸÇÿµÿ© ÿ¨ÿØŸäÿØÿ©!")
                    .WithDescription(story)
                    .WithColor(hasInvite ? Color.Green : Color.Orange)
                    .WithThumbnailUrl(user.GetAvatarUrl() ?? "")
                    .WithTimestamp(DateTimeOffset.UtcNow)
                    .WithFooter(footer => footer.Text = $"UserID: {user.Id} | {(hasInvite ? "üü¢ ÿπÿ∂Ÿà ÿ®ÿ•ŸÜŸÅÿßŸäÿ™" : "üü† ÿπÿ∂Ÿà ÿ®ÿØŸàŸÜ ÿ•ŸÜŸÅÿßŸäÿ™")}")
                    .Build();

                await storyChannel.SendMessageAsync(text: user.Mention, embed: embed);
                _logger.LogInformation("[Story] Story sent to channel successfully for user {Username}", user.Username);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "[Error] Failed to send story to channel for user {Username}", user.Username);
            }
        }

        public void SaveStory(ulong userId, string story)
        {
            try
            {
                var stories = File.Exists(StoriesFile)
                    ? JsonConvert.DeserializeObject<Dictionary<ulong, string>>(File.ReadAllText(StoriesFile)) ?? new Dictionary<ulong, string>()
                    : new Dictionary<ulong, string>();

                stories[userId] = story;
                File.WriteAllText(StoriesFile, JsonConvert.SerializeObject(stories, Formatting.Indented));
                _logger.LogInformation("[Story] Story saved for user {UserId}", userId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "[Error] Failed to save story");
            }
        }

        public string LoadStory(ulong userId)
        {
            try
            {
                if (!File.Exists(StoriesFile)) return "";
                var stories = JsonConvert.DeserializeObject<Dictionary<ulong, string>>(File.ReadAllText(StoriesFile)) ?? new Dictionary<ulong, string>();
                return stories.ContainsKey(userId) ? stories[userId] : "";
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "[Error] Failed to load story");
                return "";
            }
        }
    }
}
